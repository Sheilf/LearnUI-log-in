
class Root extends React.Component{
  
  constructor(props){
    super(props);
  }
  
  render(){
    return(
      <main>
        <section>
          <LoginPage banner = {this.props.app}/>
          
        </section>
      </main>
    )
  }
  
}
class LoginPage extends React.Component{
  constructor(props){
    super(props)
  }
  
  render(){
    return(
      <section id="LoginPage">
          <Banner banner = {this.props.banner} />
      
          <Login />
        
      </section>
    )
  }
}
function Banner(props){
  return(
    <header id="Banner">
      <h1>{props.banner}</h1>
      <p>Build schools studying math.<br />
        
      </p>
      
    </header>  
    
  )
}
class Login extends React.Component{
  constructor(props){
    super(props)
    
    this.state ={
      role:""
 
    }
    
    this.selectRole = this.selectRole.bind(this);
  }
  
  selectRole(event){
    if(event.target.id==="Teacher" || event.target.id === "Student"){
      this.setState({
        role: event.target.id
      })
      
      let UserPortalContainer = document.getElementById("UserPortal");
      let transitionPortalDefault = document.getElementById("display-default-portal");
      let displayRolePortal = document.getElementById("display-role-portal");

       transitionPortalDefault.style.visibility = "hidden";
      transitionPortalDefault.style.opacity=0;
     
      
      displayRolePortal.style.opacity = 1;
      displayRolePortal.style.visibility="visible";
      
      if(event.target.id==="Teacher"){

        UserPortalContainer.style.border="2px solid #D3A841";
      }else{
        UserPortalContainer.style.border="2px solid #055829";
      }
    }
  }
  
  render(){
    return(
      <section id="Login" onClick = {this.selectRole}>
        <UserPortal role={this.state.role}/>    
        <Role />
      </section>
    )
  }
}
class UserPortal extends React.Component{
  constructor(props){
    super(props)
    this.state={
      
    }
  }
  
  render(){
    let roleList;
    if(this.props.role==="Teacher"){
      roleList = <ul id="roleList"> 
            <li>&#x25A2; Track student progress</li>
            <li>&#x25A2; Improve your cirriculums with student feedback</li>
            <li>&#x25A2; Provide your students with awesome resources</li>
          </ul>
    }else if(this.props.role==="Student"){
      roleList = <ul id="roleList">
              <li>&#x25A2; Use guides, forums, and lectures to study.</li>
              <li>&#x25A2; Practice & earn points to build help build schools.</li>
              <li>&#x25A2; Personalize your account based on your hard work!</li>              
            </ul>
    }
    return(
      <section id="UserPortal">
     
        <div id="display-default-portal">
          LearnUI is a non-profit platform designed to <br /><b>flip the classroom.</b>
          <p>Use our modules to improve math understanding while helping us build and repair schools around you!</p>
 
        </div>
        
       <div id="display-role-portal">
         <h2 id='role-header'> {this.props.role} </h2>
          {roleList}
          <br />
         <div id="input-box">
           <p> Log in</p>
         <label>Username &nbsp; &nbsp;</label><input type="email" />
          <br />
           <br />
         <label>Password &nbsp; &nbsp;  </label><input type="password" />
         </div>
        </div>

        
      </section>
    )
  }
}
class Role extends React.Component{
  constructor(props){
    super(props)
  }
  
  render(){
    return(
      <section id="Role">
        
        <Teacher />
        <Student />
      </section>
    )
  }
}

class Teacher extends React.Component{
  constructor(props){
    super(props)
  }
  
  render(){
    return(
      <section id="Teacher"  className = "role-buttons">
        
        Teacher
      </section>
    )
  }
}

class Student extends React.Component{
  constructor(props){
    super(props)
  }
  
  render(){
    return(
      <section id="Student"  className = "role-buttons">
        Student
        
      </section>
    )
  }
}



ReactDOM.render(<Root app="LearnUI"/>, document.getElementById("react-root"))

var xspacing = 4;    // Distance between each horizontal location
var w;                // Width of entire wave
var theta = 0.0;      // Start angle at 0
var amplitude = 250.0; // Height of wave
var period = 125.0;   // How many pixels before the wave repeats
var dx;               // Value for incrementing x
var yvalues;  // Using an array to store height values for the wave

//P5.JS functions for background animation;
function windowResized() {
  console.log("Resizing");
  resizeCanvas(windowWidth, windowHeight);
  
}
function setup() {
  
  //set up acts as a constructor.
  //You can set var canvas = createCanvas(x,y) here
  createCanvas(windowWidth, windowHeight);
  w = width+16;
  dx = (TWO_PI / period) * xspacing;
  yvalues = new Array(floor(w/xspacing));
}  
function draw() {
  //this loops a draw, about 50-55 fps
  //console.log("a frame is painted " );
;
  background(0, 6, 35);
  calcWave();
  renderWave();
}

function calcWave() {
  // Increment theta (try different values for 
  // 'angular velocity' here)
  // if you increase this you'll find yourself traveling thru time
  //try 0.5
  theta += 0.0015;

  // For every x value, calculate a y value with sine function
  var x = theta;
  for (var i = 0; i < yvalues.length; i++) {
    yvalues[i] = sin(x)*amplitude;
    x+=dx;
  }
}
function renderWave() {
  noStroke();
  fill(255);
  // A simple way to draw the wave with an ellipse at each location
  for (var x = 0; x < yvalues.length; x++) {
    ellipse(x*xspacing, height/2+yvalues[x], 3.97, 3.85);

  }
}
